// ========================
// üü¢ Bi·∫øn to√†n c·ª•c
// ========================
let friendsListData = [];
let activeChatUser = null;
let searchTimeout = null;

// ========================
// üü¢ Helper: Get auth token
// ========================
function getAuthToken() {
  const userData = localStorage.getItem('user') || sessionStorage.getItem('user');
  if (!userData) return null;
  try {
    const user = JSON.parse(userData);
    return user.token;
  } catch (e) {
    return null;
  }
}

// ========================
// üü¢ Helper: API call v·ªõi authentication
// ========================
async function apiCall(url, options = {}) {
  const token = getAuthToken();
  if (!token) {
    throw new Error('No authentication token');
  }

  const headers = {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${token}`,
    ...options.headers
  };

  const response = await fetch(url, { ...options, headers });
  if (!response.ok) {
    throw new Error(`API call failed: ${response.statusText}`);
  }
  return response.json();
}

// ========================
// üü¢ Khi trang load xong
// ========================
document.addEventListener("DOMContentLoaded", function () {
  const searchInput = document.querySelector("#searchInput");
  const searchResults = document.querySelector("#searchResults");
  const friendsList = document.querySelector("#friendsList");
  const friendRequestsList = document.querySelector("#friendRequestsList");

  const chatPanel = document.querySelector("#chatPanel");
  const chatUserName = document.querySelector("#chatUserName");
  const chatUserStatus = document.querySelector("#chatUserStatus");
  const chatUserAvatar = document.querySelector("#chatUserAvatar");
  const chatMessages = document.querySelector("#chatMessages");
  const chatInputContainer = document.querySelector("#chatInputContainer");

  // Ki·ªÉm tra xem c√≥ ·ªü trang index.html kh√¥ng (c√≥ friendsList element)
  if (!friendsList) {
    console.log("Chat.js: Not on main chat page, skipping initialization");
    return;
  }

  // ====== 1Ô∏è‚É£ LOAD DANH S√ÅCH B·∫†N B√à ======
  loadFriends();

  // ====== 2Ô∏è‚É£ LOAD L·ªúI M·ªúI K·∫æT B·∫†N ======
  loadFriendRequests();

  // ====== 3Ô∏è‚É£ X·ª¨ L√ù T√åM KI·∫æM NG∆Ø·ªúI D√ôNG (debounced) ======
  if (searchInput) {
    searchInput.addEventListener("input", function () {
      const keyword = searchInput.value.trim();

      // Clear previous timeout
      if (searchTimeout) {
        clearTimeout(searchTimeout);
      }

      if (keyword === "") {
        searchResults.innerHTML = "";
        return;
      }

      // Debounce: Ch·ªâ search sau 500ms user ng·ª´ng g√µ
      searchTimeout = setTimeout(() => {
        searchUsers(keyword);
      }, 500);
    });
  }

  // ====== FUNCTIONS ======

  // Load danh s√°ch b·∫°n b√®
  async function loadFriends() {
    try {
      const friends = await apiCall("http://localhost:8080/api/friends");
      friendsListData = friends || [];
      renderFriends(friends || []);
    } catch (err) {
      console.error("‚ö†Ô∏è L·ªói khi t·∫£i danh s√°ch b·∫°n b√®:", err);
      if (friendsList) {
        friendsList.innerHTML = `<p style="color:red; padding: 20px;">Kh√¥ng th·ªÉ t·∫£i danh s√°ch b·∫°n b√®. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.</p>`;
      }
    }
  }

  // Load l·ªùi m·ªùi k·∫øt b·∫°n
  async function loadFriendRequests() {
    try {
      const requests = await apiCall("http://localhost:8080/api/friends/requests");
      renderFriendRequests(requests || []);
      
      // Update badge
      const badge = document.querySelector("#friendRequestBadge");
      if (badge) {
        if (requests && requests.length > 0) {
          badge.textContent = requests.length;
          badge.style.display = 'inline';
        } else {
          badge.style.display = 'none';
        }
      }
    } catch (err) {
      console.error("‚ö†Ô∏è L·ªói khi t·∫£i l·ªùi m·ªùi k·∫øt b·∫°n:", err);
    }
  }

  // T√¨m ki·∫øm ng∆∞·ªùi d√πng
  async function searchUsers(keyword) {
    try {
      if (!searchResults) {
        console.error("searchResults element not found");
        return;
      }
      
      searchResults.innerHTML = '<p style="padding: 10px; color: gray;">ƒêang t√¨m ki·∫øm...</p>';
      
      const url = `http://localhost:8080/api/friends/search?q=${encodeURIComponent(keyword)}`;
      const users = await apiCall(url);
      
      renderSearchResults(users || []);
    } catch (err) {
      console.error("L·ªói khi t√¨m ki·∫øm:", err);
      if (searchResults) {
        searchResults.innerHTML = '<p style="padding: 10px; color: red;">L·ªói khi t√¨m ki·∫øm</p>';
      }
    }
  }

  // ====== RENDER FUNCTIONS ======

  // Render danh s√°ch b·∫°n b√®
  function renderFriends(list) {
    if (!friendsList) return;
    
    friendsList.innerHTML = "";
    if (!list || list.length === 0) {
      friendsList.innerHTML = "<p style='padding: 20px; text-align: center; color: gray;'>Ch∆∞a c√≥ b·∫°n b√® n√†o</p>";
      return;
    }

    list.forEach(friend => {
      const item = document.createElement("div");
      item.classList.add("friend-item");
      item.style.cursor = "pointer";
      item.innerHTML = `
        <div class="friend-avatar">
          <img src="${friend.avatar || friend.avatar_url || '../assets/images/default-avatar.svg'}" alt="Avatar">
          <span class="status ${friend.online || friend.is_online ? 'online' : 'offline'}"></span>
        </div>
        <div class="friend-info">
          <h4>${friend.name || friend.username}</h4>
          <p>${friend.online || friend.is_online ? 'ƒêang ho·∫°t ƒë·ªông' : 'Offline'}</p>
        </div>
      `;

      item.addEventListener("click", function () {
        openChat(friend);
      });

      friendsList.appendChild(item);
    });
  }

  // Render l·ªùi m·ªùi k·∫øt b·∫°n
  function renderFriendRequests(requests) {
    if (!friendRequestsList) return;

    friendRequestsList.innerHTML = "";
    if (!requests || requests.length === 0) {
      friendRequestsList.innerHTML = "<p style='padding: 20px; text-align: center; color: gray;'>Kh√¥ng c√≥ l·ªùi m·ªùi k·∫øt b·∫°n n√†o</p>";
      return;
    }

    requests.forEach(req => {
      const item = document.createElement("div");
      item.classList.add("friend-request-item");
      item.innerHTML = `
        <img src="${req.avatar || req.avatar_url || '../assets/images/default-avatar.svg'}" alt="${req.name || req.username}" class="friend-avatar">
        <div class="friend-info">
          <div class="friend-name">${req.name || req.username}</div>
          <div class="friend-status">${req.email || ''}</div>
        </div>
        <div class="friend-actions">
          <button class="btn-accept" data-id="${req.id}">Ch·∫•p nh·∫≠n</button>
          <button class="btn-decline" data-id="${req.id}">T·ª´ ch·ªëi</button>
        </div>
      `;

      // Accept button
      const acceptBtn = item.querySelector(".btn-accept");
      acceptBtn.addEventListener("click", async (e) => {
        e.stopPropagation();
        await acceptFriendRequest(req.id);
      });

      // Decline button
      const declineBtn = item.querySelector(".btn-decline");
      declineBtn.addEventListener("click", async (e) => {
        e.stopPropagation();
        await rejectFriendRequest(req.id);
      });

      friendRequestsList.appendChild(item);
    });
  }

  // Render k·∫øt qu·∫£ t√¨m ki·∫øm
  function renderSearchResults(results) {
    if (!searchResults) return;

    searchResults.innerHTML = "";
    if (!results || results.length === 0) {
      searchResults.innerHTML = "<p style='padding: 10px; color: gray;'>Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o</p>";
      return;
    }

    results.forEach(user => {
      const div = document.createElement("div");
      div.classList.add("search-result-item");
      div.style.cursor = "pointer";
      div.style.padding = "10px";
      div.style.borderBottom = "1px solid #eee";
      div.style.display = "flex";
      div.style.alignItems = "center";
      div.style.gap = "10px";

      const isFriend = user.status === 'friend';
      const isPending = user.status === 'pending';

      div.innerHTML = `
        <div class="result-avatar" style="width: 40px; height: 40px; border-radius: 50%; overflow: hidden;">
          <img src="${user.avatar || user.avatar_url || '../assets/images/default-avatar.svg'}" alt="Avatar" style="width: 100%; height: 100%; object-fit: cover;">
        </div>
        <div class="result-info" style="flex: 1;">
          <h4 style="margin: 0; font-size: 14px;">${user.name || user.username}</h4>
          <p style="margin: 0; font-size: 12px; color: gray;">${user.email || ''}</p>
        </div>
        <div class="result-action">
          ${
            isFriend
              ? '<span style="color: green; font-size: 13px;">‚úì B·∫°n b√®</span>'
              : isPending
              ? '<span style="color: orange; font-size: 13px;">‚è≥ ƒêang ch·ªù</span>'
              : '<button class="add-friend-btn" data-id="' + user.id + '" style="padding: 5px 10px; background: #3B82F6; color: white; border: none; border-radius: 5px; cursor: pointer;">+ K·∫øt b·∫°n</button>'
          }
        </div>
      `;

      // Click ƒë·ªÉ m·ªü chat n·∫øu ƒë√£ l√† b·∫°n
      if (isFriend) {
        div.addEventListener("click", () => openChat(user));
      }

      // Add friend button
      const addBtn = div.querySelector(".add-friend-btn");
      if (addBtn) {
        addBtn.addEventListener("click", async (e) => {
          e.stopPropagation();
          await sendFriendRequest(user.id, addBtn);
        });
      }

      searchResults.appendChild(div);
    });
  }

  // ====== ACTION FUNCTIONS ======

  // G·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n
  async function sendFriendRequest(friendId, button) {
    try {
      button.disabled = true;
      button.textContent = "ƒêang g·ª≠i...";
      
      await apiCall("http://localhost:8080/api/friends/request", {
        method: "POST",
        body: JSON.stringify({ friend_id: friendId })
      });

      button.textContent = "‚úì ƒê√£ g·ª≠i";
      button.style.background = "#10B981";
      
      alert("ƒê√£ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n!");
    } catch (err) {
      console.error("‚ùå L·ªói g·ª≠i l·ªùi m·ªùi:", err);
      button.disabled = false;
      button.textContent = "+ K·∫øt b·∫°n";
      alert("Kh√¥ng th·ªÉ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n");
    }
  }

  // Ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n
  async function acceptFriendRequest(friendId) {
    try {
      await apiCall("http://localhost:8080/api/friends/accept", {
        method: "POST",
        body: JSON.stringify({ friend_id: friendId })
      });

      alert("ƒê√£ ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n!");
      
      // Reload danh s√°ch
      loadFriends();
      loadFriendRequests();
    } catch (err) {
      console.error("‚ùå L·ªói ch·∫•p nh·∫≠n l·ªùi m·ªùi:", err);
      alert("Kh√¥ng th·ªÉ ch·∫•p nh·∫≠n l·ªùi m·ªùi");
    }
  }

  // T·ª´ ch·ªëi l·ªùi m·ªùi k·∫øt b·∫°n
  async function rejectFriendRequest(friendId) {
    try {
      await apiCall("http://localhost:8080/api/friends/reject", {
        method: "POST",
        body: JSON.stringify({ friend_id: friendId })
      });

      alert("ƒê√£ t·ª´ ch·ªëi l·ªùi m·ªùi k·∫øt b·∫°n");
      
      // Reload danh s√°ch
      loadFriendRequests();
    } catch (err) {
      console.error("‚ùå L·ªói t·ª´ ch·ªëi l·ªùi m·ªùi:", err);
      alert("Kh√¥ng th·ªÉ t·ª´ ch·ªëi l·ªùi m·ªùi");
    }
  }

  // M·ªü khung chat
  function openChat(user) {
    activeChatUser = user;

    if (!chatUserName || !chatUserStatus || !chatUserAvatar || !chatMessages || !chatInputContainer) {
      return;
    }

    // Chuy·ªÉn sang tab Messages
    const messagesTab = document.querySelector('[data-section="messages"]');
    if (messagesTab) messagesTab.click();

    // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi ƒëang chat
    chatUserName.textContent = user.name || user.username;
    chatUserStatus.textContent = (user.online || user.is_online) ? "ƒêang ho·∫°t ƒë·ªông" : "Offline";
    chatUserAvatar.src = user.avatar || user.avatar_url || "../assets/images/default-avatar.svg";

    // Hi·ªÉn th·ªã √¥ nh·∫≠p chat
    chatMessages.innerHTML = "";
    chatInputContainer.style.display = "block";

    const welcomeMsg = document.createElement("div");
    welcomeMsg.classList.add("system-message");
    welcomeMsg.style.textAlign = "center";
    welcomeMsg.style.padding = "20px";
    welcomeMsg.style.color = "gray";
    welcomeMsg.textContent = `üí¨ ƒêang tr√≤ chuy·ªán v·ªõi ${user.name || user.username}`;
    chatMessages.appendChild(welcomeMsg);
  }
});
