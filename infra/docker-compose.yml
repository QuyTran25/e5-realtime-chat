# Hạ tầng, test
version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: e5-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: chatdb
      POSTGRES_USER: chatuser
      POSTGRES_PASSWORD: chatpass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../server/migrations:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chatuser -d chatdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - e5-net

  server:
    build:
      context: ..
      dockerfile: server/Dockerfile
    image: e5-realtime-server:latest
    container_name: e5-server
    ports:
      - "8080:8080"
    restart: unless-stopped
    environment:
      - PORT=8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=chatuser
      - DB_PASSWORD=chatpass
      - DB_NAME=chatdb
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - e5-net

  client:
    image: nginx:alpine
    container_name: e5-client
    volumes:
      - ../client/html:/usr/share/nginx/html
      - ../client/assets:/usr/share/nginx/html/assets:ro
    ports:
      - "3000:80"
    depends_on:
      - server
    networks:
      - e5-net

  redis:
    image: redis:7-alpine
    container_name: e5-redis
    restart: unless-stopped
    networks:
      - e5-net

  # optional k6 runner as service (useful for CI)
  k6:
    image: loadimpact/k6
    container_name: e5-k6
    working_dir: /scripts
    volumes:
      - ../infra:/scripts:ro
    entrypoint: ["k6", "run", "/scripts/k6-script.js"]
    networks:
      - e5-net

volumes:
  postgres_data:
    driver: local

networks:
  e5-net:
    driver: bridge